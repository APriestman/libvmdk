/*
 * Library to support the VMware Virtual Disk (VMDK) format
 *
 * Copyright (c) 2009, Joachim Metz <forensics@hoffmannbv.nl>,
 * Hoffmann Investigations. All rights reserved.
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

#if !defined( _LIBVMDK_H )
#define _LIBVMDK_H

#include <libvmdk/definitions.h>
#include <libvmdk/error.h>
#include <libvmdk/extern.h>
#include <libvmdk/features.h>
#include <libvmdk/types.h>

#include <stdio.h>

#if defined( LIBVMDK_HAVE_BFIO )
#include <libbfio.h>
#endif

#if defined( __cplusplus )
extern "C" {
#endif

/* -------------------------------------------------------------------------
  * Support functions
  * ------------------------------------------------------------------------- */

/* Returns the library version
  */
LIBVMDK_EXTERN const char *libvmdk_get_version(
                            void );

/* Determines if a file is a VMDK file (check for the VMDK file signature)
  * Returns 1 if true, 0 if not or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_check_file_signature(
                    const char *filename,
                    libvmdk_error_t **error );

#if defined( LIBVMDK_HAVE_WIDE_CHARACTER_TYPE )
/* Determines if a file is a VMDK file (check for the VMDK file signature)
  * Returns 1 if true, 0 if not or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_check_file_signature_wide(
                    const wchar_t *filename,
                    libvmdk_error_t **error );
#endif

#if defined( LIBVMDK_HAVE_BFIO )
/* Determines if a file is a VMDK file (check for the VMDK file signature) using a Basic File IO (bfio) handle
  * Returns 1 if true, 0 if not or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_check_file_signature_file_io_handle(
                    libbfio_handle_t *bfio_handle,
                    libvmdk_error_t **error );
#endif

/* -------------------------------------------------------------------------
  * Notify functions
  * ------------------------------------------------------------------------- */

/* Set the verbose notification
  */
LIBVMDK_EXTERN void libvmdk_notify_set_verbose(
                     int verbose );

/* Set the notification stream
  * Returns 1 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_notify_set_stream(
                    FILE *stream,
                    libvmdk_error_t **error );

/* Opens the notification stream using a filename
  * The stream is opened in append mode
  * Returns 1 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_notify_stream_open(
                    const char *filename,
                    libvmdk_error_t **error );

/* Closes the notification stream if opened using a filename
  * Returns 0 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_notify_stream_close(
                    libvmdk_error_t **error );

/* -------------------------------------------------------------------------
  * Error functions
  * ------------------------------------------------------------------------- */

/* Frees the error including elements
  */
LIBVMDK_EXTERN void libvmdk_error_free(
                     libvmdk_error_t **error );

/* Prints a descriptive string of the error to the stream
  * Returns the amount of printed characters if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_error_fprint(
                    libvmdk_error_t *error,
                    FILE *stream );

/* Prints a descriptive string of the error to the string
  * Returns the amount of printed characters if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_error_sprint(
                    libvmdk_error_t *error,
                    char *string,
                    size_t size );

/* Prints a backtrace of the error to the stream
  * Returns the amount of printed characters if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_error_backtrace_fprint(
                    libvmdk_error_t *error,
                    FILE *stream );

/* Prints a backtrace of the error to the string
  * Returns the amount of printed characters if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_error_backtrace_sprint(
                    libvmdk_error_t *error,
                    char *string,
                    size_t size );

/* -------------------------------------------------------------------------
  * File functions
  * ------------------------------------------------------------------------- */

/* Initializes the Windows Shortcut file
  * Make sure the value file is pointing to is set to NULL
  * Returns 1 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_file_initialize(
                    libvmdk_file_t **file,
                    libvmdk_error_t **error );

/* Frees an exisisting Windows Shortcut file
  * Returns 1 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_file_free(
                    libvmdk_file_t **file,
                    libvmdk_error_t **error );

/* Signals the libvmdk file to abort its current activity
  * Returns 1 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_file_signal_abort(
                    libvmdk_file_t *file,
                    libvmdk_error_t **error );

/* Opens a Windows Shortcut file
  * Returns 1 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_file_open(
                    libvmdk_file_t *file,
                    const char *filename,
                    int flags,
                    libvmdk_error_t **error );

#if defined( LIBVMDK_HAVE_WIDE_CHARACTER_TYPE )
/* Opens a Windows Shortcut file
  * Returns 1 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_file_open_wide(
                    libvmdk_file_t *file,
                    const wchar_t *filename,
                    int flags,
                    libvmdk_error_t **error );
#endif

#if defined( LIBVMDK_HAVE_BFIO )
/* Opens a Windows Shortcut file using a Basic File IO (bfio) handle
  * Returns 1 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_file_open_file_io_handle(
                    libvmdk_file_t *file,
                    libbfio_handle_t *file_io_handle,
                    int flags,
                    libvmdk_error_t **error );
#endif

/* Closes a Windows Shortcut file
  * Returns 0 if successful or -1 on error
  */
LIBVMDK_EXTERN int libvmdk_file_close(
                    libvmdk_file_t *file,
                    libvmdk_error_t **error );

#if defined( __cplusplus )
}
#endif

#endif

